package proj;

import java.io.*;
import java.net.*;

import javax.media.*;
import javax.media.control.*;
import javax.media.format.*;
import javax.media.protocol.*;

import java.awt.*;

import javax.swing.*;
import javax.media.protocol.DataSource;


public class VServer extends JFrame implements Runnable{
	 private VServerThread clients[] = new VServerThread[50];
	   private String CPorts[]=new String[50];
	   private ServerSocket server = null;
	   private Thread       thread = null;
	   private MediaLocator locator;
	   private String ipAddress;
	   private String port;
	   Player player;
	   int slep;
	   int mess;
	   int mes2;
	   String cip;
	   private Processor processor = null;
	   private DataSink  rtptransmitter = null;
	   private DataSource dataOutput = null;
	   private int clientCount = 0;
	   public void VideoPlayer(String outfile2) {

		   ControllerListener cl = new ControllerAdapter() {

		   public void transition(TransitionEvent te) {

		   int state = te.getCurrentState();
		   switch (state)
		   {
	  	   case Processor.Realized:
		   {

		   slep = (int) player.getDuration().getSeconds();
		   break;
		   }

		   }
		   }
		   };
		   try {
		   MediaLocator ml;
		   File file = new File(outfile2);
		   if (file.exists()) {
		   ml = new MediaLocator(file.toURL());
		   } else
		   ml = new MediaLocator(outfile2);
		   player = Manager.createPlayer(ml);
		   player.addControllerListener(cl);
		   player.prefetch();
		   } catch (NoPlayerException npe) {
		   System.out.println(npe);
		   System.exit(0);
		   } catch (IOException ioe) {
		   System.out.println(ioe);
		   }
		   }
	   int port11;
    public VServer() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

    	frame = new JFrame("Show Message Dialog");
        jLabel1 = new JLabel();
        jTextField1 = new JTextField();
        jButton1 = new JButton();
        jLabel2 = new JLabel();
        jTextField2 = new JTextField();
        jButton2 = new JButton();
        jLabel3 = new JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();


        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setBackground(new Color(204, 255, 204));

        jLabel1.setText("Video Path: ");
		jTextField3.setText("2146");
		jTextField2.setText("26800");
        jButton1.setText("Open");
        jButton1.setActionCommand ("Open");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Port No:");
        jLabel3.setText("Server");
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel4.setText("Duplicate Port No:");
        jButton2.setText("Host");
         jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setActionCommand ("Host");
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(21, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(78, 78, 78)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton1))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(293, 293, 293))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jButton2)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>



private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
	String Action;
	 String filename="";
	 String po="26800";
	 Action = evt.getActionCommand ();

	  if (Action.equals("Open"))
	  {
			if (fd == null)
			{
				fd = new FileDialog(VServer.this, "Open File",FileDialog.LOAD);
				fd.setDirectory("/movies");
			}
			fd.show();
			if (fd.getFile() != null)
			{
				filename = fd.getDirectory() + fd.getFile();
				jTextField1.setText(filename);
				jTextField2.setText(po);
				jTextField3.setText("2146");
			}
	  }
	  else
	  {
			dispose();
			System.exit(0);
	  }
}
int duport;
private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
	String Action;

	 Action = evt.getActionCommand ();

	  if (Action.equals("Host"))
	  {
		  if(!jTextField1.getText().equals("") && !jTextField2.getText().equals("")&& !jTextField3.getText().equals("")){
			  String strr1=jTextField1.getText();
		   	  String dff="file:/"+strr1;
		   	  ml=new MediaLocator(dff);
		   	  String strr=jTextField2.getText();
		   	  port11=Integer.parseInt(strr);
		   	  duport=Integer.parseInt(jTextField3.getText());
			  cs();
		  }
		  else{

			  JOptionPane.showMessageDialog(frame,"Check Video Path & Port Nos");
			  jTextField1.requestFocus();
		  }
	  }
	  else
	  {
			dispose();
			System.exit(0);
	  }
}
public void cs(){
	   try
   {  System.out.println("Binding to port " + port11 + ", please wait  ...");
      server = new ServerSocket(port11);
      System.out.println("Server started: " + server);
      start(); }
   catch(IOException ioe)
   {  System.out.println("Can not bind to port " + port11 + ": " + ioe.getMessage()); }
}
int cc=0;
Socket soc;
public void run()
{  while (thread != null)
   {  try
      {
 	  System.out.println("Waiting for a Peer...");
         addThread(server.accept()); }
      catch(IOException ioe)
      {  System.out.println("Server accept error: " + ioe); stop(); }
   }
}
public void start()
{
	   if (thread == null)
   {  thread = new Thread(this);
      thread.start();
   }
}
public void stop()
{
	   if (thread != null)
   {  thread.stop();
      thread = null;
   }
}
private int findClient(int ID)
{  for (int i = 0; i < clientCount; i++)
      if (clients[i].getID() == ID)
         return i;
   return -1;
}
public synchronized void handle(int ID, String input)
{  if (input.equals(".bye"))
   {  clients[findClient(ID)].send(".bye");
      remove(ID); }
   else
      for (int i = 0; i < clientCount; i++)
         clients[i].send(ID + ": " + input);
}
public synchronized void remove(int ID)
{  int pos = findClient(ID);
String iid=Integer.toString(ID);
   if (pos >= 0)
   {  VServerThread toTerminate = clients[pos];
      System.out.println("Removing Peer " + ID);
      for(int jk=0;jk<clientCount;jk++){
     	 String re=CPorts[jk].substring(0,4);

     	 if(re.equals(iid))
     	 {
     		 CPorts[jk]=CPorts[jk+1];
     	 }
      }

      if (pos < clientCount-1)
         for (int i = pos+1; i < clientCount; i++)
         {
            clients[i-1] = clients[i];

         }
      clientCount--;
      if(clientCount<1){
          mess=0;cip=null;
          }
      try
      {  toTerminate.close(); }
      catch(IOException ioe)
      {  System.out.println("Error closing thread: " + ioe); }
      toTerminate.stop(); }
}
int cp=1;
private void addThread(Socket socket)
{  soc=socket;
	   if (clientCount < clients.length)
   {  System.out.println("Peer connected ");

      clients[clientCount] = new VServerThread(this, socket);
      if(clientCount==0){
      	mes2=duport;
        }
      String iids=Integer.toString(clients[clientCount].getID());
  	String mm=Integer.toString(mes2);
	 	CPorts[clientCount]=iids+mm;


      try
      {
     	 //send
     	 if(clientCount==0)
     	 {
     		 ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
        	     oos.writeObject("0");
     	 }
     	if(clientCount>=1 && clientCount<=2){
     		cp=1;
     	 ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
     	  int mess1=Integer.parseInt(CPorts[clientCount].substring(4));
     	  mess1-=2;
     	  String mes12=Integer.toString(mess1);
          	int ih=0;
          	for(int jk=0;jk<clientCount;jk++){
          	 String re=CPorts[jk].substring(4);

          	 if(re.equals(mes12))
          	 {
          	    ih=1;
          	 }
          	 }
          	if(ih==1){
          	System.err.println("Connect to "+mes12);
           oos.writeObject(mes12);
          	}
          	else{
          		System.err.println("Connect to "+CPorts[0].substring(4));
          		oos.writeObject(CPorts[0].substring(4));
          	}
     	}
     	if(clientCount>2){
        	 ObjectOutputStream ooss = new ObjectOutputStream(socket.getOutputStream());
        	 int cc=clientCount-2;
        	int mess1=Integer.parseInt(CPorts[cc].substring(4));
        	mess1-=2;
        	String mes12=Integer.toString(mess1);
        	int ih=0;
        	for(int jk=0;jk<clientCount;jk++){
        	 String re=CPorts[jk].substring(4);

        	 if(re.equals(mes12))
        	 {
        	    ih=1;
        	    break;
        	}
        	 }
        	if(ih==1){
        	System.err.println("Port "+mes12);
         ooss.writeObject(mes12);
        	}
        	else{
        		if(cp>=clientCount){
        			cp=clientCount-1;
        		}
        		System.err.println("Connect to "+CPorts[cp].substring(4));
        		ooss.writeObject(CPorts[cp].substring(4));cp++;
        	}
        	}

          ObjectOutputStream oos2 = new ObjectOutputStream(socket.getOutputStream());
     	  String mess2=Integer.toString(mes2);//Integer.toString(CPorts[clientCount]);
           oos2.writeObject(mess2);
           mes2+=2;


           ObjectOutputStream oos1 = new ObjectOutputStream(socket.getOutputStream());
     	  oos1.writeObject(cip);
          //read
     	  if(mess==0){
       ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
        cip= (String) ois.readObject();
       System.out.println("Peer IP " + cip);
     	  }
 	 }
 	  catch(Exception ioe)
      {  System.out.println("Error in send UrgentData: " + ioe); }
       MediaLocator locator=ml;
       if(mess==0){
       String sml=ml.toString();
      VideoPlayer(sml);
      try {
      Thread.currentThread().sleep(800);
      }
      catch (InterruptedException ie) {
   	}
      try
      {


     	 ObjectOutputStream oos1 = new ObjectOutputStream(socket.getOutputStream());
     	 String slp=Integer.toString(slep);
     	 oos1.writeObject(slp);

      }
      catch(Exception ioe)
      {  System.out.println("Error in send UrgentData: " + ioe); }
       String ss=Integer.toString(socket.getLocalPort());
      VideoTransmit(locator, cip, ss);
      String result =start1();

  	 	if (result != null) {
  	    System.err.println("Error : " + result);
  	    System.exit(0);
  	}

            System.err.println("Transmitting the video...");


  	try {

  		int gh=slep+2;
  		String saa=Integer.toString(gh)+"000";
  		int spt=Integer.parseInt(saa);

  	    Thread.currentThread().sleep(spt);
  	} catch (InterruptedException ie) {
  	}


  	stop1();

  	System.err.println("...Transmission ended.");
       }
       mess=mes2;

      try
      {
     	clients[clientCount].open();
         clients[clientCount].start();
         clientCount++; }
      catch(IOException ioe)
      {  System.out.println("Error opening thread: " + ioe); } }
   else
      System.out.println("Peer refused: maximum " + clients.length + " reached.");
}
public void VideoTransmit(MediaLocator locator,
			 String ipAddress,
			 String port) {

	this.locator = locator;
	this.ipAddress = ipAddress;
	this.port = port;
}


public synchronized String start1() {
	String result;


	result = createProcessor();
	if (result != null)
	    return result;


	result = createTransmitter();
	if (result != null) {
	    processor.close();
	    processor = null;
	    return result;
	}


	processor.start();

	return null;
}


public void stop1() {
	synchronized (this) {
	    if (processor != null) {
		processor.stop();
		processor.close();
		processor = null;
		rtptransmitter.close();
		rtptransmitter = null;
	    }
	}
}

private String createProcessor() {
	if (locator == null)
	    return "Locator is null";

	DataSource ds;
	DataSource clone;

	try {
	    ds = Manager.createDataSource(locator);
	} catch (Exception e) {
	    return "Couldn't create DataSource";
	}


	try {
	    processor = Manager.createProcessor(ds);
	} catch (NoProcessorException npe) {
	    return "Couldn't create processor";
	} catch (IOException ioe) {
	    return "IOException creating processor";
	}


	boolean result = waitForState(processor, Processor.Configured);
	if (result == false)
	    return "Couldn't configure processor";


	TrackControl [] tracks = processor.getTrackControls();


	if (tracks == null || tracks.length < 1)
	    return "Couldn't find tracks in processor";

	boolean programmed = false;


	for (int i = 0; i < tracks.length; i++) {
	    Format format = tracks[i].getFormat();
	    if (  tracks[i].isEnabled() &&
		  format instanceof VideoFormat &&
		  !programmed) {


		Dimension size = ((VideoFormat)format).getSize();
		float frameRate = ((VideoFormat)format).getFrameRate();
		int w = (size.width % 8 == 0 ? size.width :
				(int)(size.width / 8) * 8);
		int h = (size.height % 8 == 0 ? size.height :
				(int)(size.height / 8) * 8);
		VideoFormat jpegFormat = new VideoFormat(VideoFormat.JPEG_RTP,
							 new Dimension(w, h),
							 Format.NOT_SPECIFIED,
							 Format.byteArray,
							 frameRate);
		tracks[i].setFormat(jpegFormat);
                System.err.println("Segmenting and Encoding video...");
		System.err.println("Video transmitted as:");
		System.err.println("  " + jpegFormat);

		programmed = true;
	    } else
		tracks[i].setEnabled(false);
	}

	if (!programmed)
	    return "Couldn't find video track";


	ContentDescriptor cd = new ContentDescriptor(ContentDescriptor.RAW_RTP);
	processor.setContentDescriptor(cd);


	result = waitForState(processor, Controller.Realized);
	if (result == false)
	    return "Couldn't realize processor";


	setJPEGQuality(processor, 0.5f);


	dataOutput = processor.getDataOutput();
	return null;
}


private String createTransmitter() {
	String rtpURL = "rtp://" + ipAddress + ":" + port + "/video";
	MediaLocator outputLocator = new MediaLocator(rtpURL);


	try {
	    rtptransmitter = Manager.createDataSink(dataOutput, outputLocator);
	    rtptransmitter.open();
	    try {
	        Thread.currentThread().sleep(4000);
	        }
	        catch (InterruptedException ie) {
	     	}
	    rtptransmitter.start();
	    try {
	        Thread.currentThread().sleep(4000);
	        }
	        catch (InterruptedException ie) {
	     	}
	    dataOutput.start();
	} catch (MediaException me) {
	    return "Couldn't create RTP data sink";
	} catch (IOException ioe) {
	    return "Couldn't create RTP data sink";
	}

	return null;
}



void setJPEGQuality(Player p, float val) {

	Control cs[] = p.getControls();
	QualityControl qc = null;
	VideoFormat jpegFmt = new VideoFormat(VideoFormat.JPEG);


	for (int i = 0; i < cs.length; i++) {

	    if (cs[i] instanceof QualityControl &&
		cs[i] instanceof Owned) {
		Object owner = ((Owned)cs[i]).getOwner();


		if (owner instanceof Codec) {
		    Format fmts[] = ((Codec)owner).getSupportedOutputFormats(null);
		    for (int j = 0; j < fmts.length; j++) {
			if (fmts[j].matches(jpegFmt)) {
			    qc = (QualityControl)cs[i];
	    		    qc.setQuality(val);

			    break;
			}
		    }
		}
		if (qc != null)
		    break;
	    }
	}
}



private Integer stateLock = new Integer(0);
private boolean failed = false;

Integer getStateLock() {
	return stateLock;
}

void setFailed() {
	failed = true;
}

private synchronized boolean waitForState(Processor p, int state) {
	p.addControllerListener(new StateListener());
	failed = false;


	if (state == Processor.Configured) {
	    p.configure();
	} else if (state == Processor.Realized) {
	    p.realize();
	}


	while (p.getState() < state && !failed) {
	    synchronized (getStateLock()) {
		try {
		    getStateLock().wait();
		} catch (InterruptedException ie) {
		    return false;
		}
	    }
	}

	if (failed)
	    return false;
	else
	    return true;
}


class StateListener implements ControllerListener {

	public void controllerUpdate(ControllerEvent ce) {


	    if (ce instanceof ControllerClosedEvent)
		setFailed();


	    if (ce instanceof ControllerEvent) {
		synchronized (getStateLock()) {
		    getStateLock().notifyAll();
		}
	    }
	}
}


static MediaLocator ml;
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VServer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    FileDialog fd = null;
    JFrame frame;
    // End of variables declaration

}
